generator client {
  provider      = "prisma-client-js"
  output        = "../../../node_modules/.prisma/client"
  binaryTargets = ["native", "darwin-arm64", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  promoterId Int?
  Promoter   Promoter? @relation(fields: [promoterId], references: [id])
}

model UsersOnStaffs {
  userId    String
  staffId   String
  createdAt DateTime @default(now())
  staff     Staff    @relation(fields: [staffId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, staffId])
}

model User {
  id                 String                      @id @default(uuid())
  createdAt          DateTime                    @default(now())
  email              String                      @unique
  password           String?
  passwordSalt       String?
  provider           String
  deactivatedAt      DateTime?
  auth_token         AuthToken[]
  fcmTokens          UsersOnFCMTokens[]
  staffs             UsersOnStaffs[]
  subscribedArtists  UsersOnSubscribedArtists[]
  subscribedConcerts UsersOnSubscribedConcerts[]
  subscribedVenues   UsersOnSubscribedVenues[]
}

model FCMToken {
  id         String             @id @default(uuid())
  tokenValue String             @unique
  createdAt  DateTime           @default(now())
  users      UsersOnFCMTokens[]
}

model UsersOnFCMTokens {
  userId     String
  fcmTokenId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fcmToken   FCMToken @relation(fields: [fcmTokenId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([userId, fcmTokenId])
}

model AuthToken {
  id            String   @id @default(uuid())
  access_token  String
  refresh_token String
  user_id       String
  created_at    DateTime @default(now())
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Venue {
  id              String                    @id @default(uuid())
  name            String
  lat             Float
  lng             Float
  geohash         String
  createdAt       DateTime                  @default(now())
  address         String
  concerts        ConcertsOnVenues[]
  subscribedUsers UsersOnSubscribedVenues[]
}

model Promoter {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  events    Event[]
}

model Artist {
  id                 String                     @id @default(uuid())
  createdAt          DateTime                   @default(now())
  name               String
  artistProfileImage ArtistProfileImage[]
  concerts           ConcertsOnArtists[]
  subscribedUsers    UsersOnSubscribedArtists[]
}

model ArtistProfileImage {
  id          String     @id @default(uuid())
  imageURL    String
  artistId    String
  createdAt   DateTime   @default(now())
  copyrightId String?
  artist      Artist     @relation(fields: [artistId], references: [id])
  copyright   Copyright? @relation(fields: [copyrightId], references: [id])
}

model EmailAuthRequest {
  id              String    @id @default(uuid())
  email           String
  authcode        String
  authenticated   Boolean   @default(false)
  createdAt       DateTime  @default(now())
  authenticatedAt DateTime?
}

model Staff {
  id           String          @id @default(uuid())
  created_at   DateTime        @default(now())
  isAuthorized Boolean         @default(false)
  users        UsersOnStaffs[]
}

model EventCategory {
  id           String    @id @default(uuid())
  name         String    @unique
  deletedAt    DateTime?
  serialNumber Int
  concerts     Concert[]
}

model Concert {
  id              String                      @id @default(uuid())
  title           String
  slug            String?                     @unique
  date            DateTime                    @db.Timestamptz(6)
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  isKOPIS         Boolean                     @default(false)
  locationCityId  String?
  eventCategoryId String?
  eventCategory   EventCategory?              @relation(fields: [eventCategoryId], references: [id])
  locationCity    LocationCity?               @relation(fields: [locationCityId], references: [id])
  artists         ConcertsOnArtists[]
  posters         ConcertsOnPosters[]
  tickets         ConcertsOnTickets[]
  venues          ConcertsOnVenues[]
  detailImages    ConcertsOnDetailImages[]
  kopisEvent      KOPISEvent?
  subscribedUsers UsersOnSubscribedConcerts[]

  @@index([locationCityId, date, deletedAt], map: "common_concert_list_index")
}

model KOPISEvent {
  id        String   @id
  concertId String   @unique
  createdAt DateTime @default(now())
  concert   Concert  @relation(fields: [concertId], references: [id])
}

model Poster {
  id          String              @id @default(uuid())
  imageURL    String
  createdAt   DateTime            @default(now())
  copyrightId String?
  concerts    ConcertsOnPosters[]
  copyright   Copyright?          @relation(fields: [copyrightId], references: [id])
}

model DetailImage {
  id        String                   @id @default(uuid())
  imageURL  String
  createdAt DateTime                 @default(now())
  concerts  ConcertsOnDetailImages[]
}

model TicketsOnPrices {
  ticketId  String
  priceId   String
  createdAt DateTime @default(now())
  price     Price    @relation(fields: [priceId], references: [id])
  ticket    Ticket   @relation(fields: [ticketId], references: [id])

  @@id([ticketId, priceId])
}

model Ticket {
  id         String              @id @default(uuid())
  openDate   DateTime
  seller     String
  sellingURL String
  createdAt  DateTime            @default(now())
  concerts   ConcertsOnTickets[]
  prices     TicketsOnPrices[]
}

model Price {
  id            String            @id @default(uuid())
  title         String
  price         Float
  priceCurrency String
  createdAt     DateTime          @default(now())
  tickets       TicketsOnPrices[]
}

model ConcertsOnArtists {
  concertId String
  artistId  String
  createdAt DateTime @default(now())
  artist    Artist   @relation(fields: [artistId], references: [id])
  concert   Concert  @relation(fields: [concertId], references: [id])

  @@id([concertId, artistId])
}

model ConcertsOnVenues {
  concertId String
  venueId   String
  createdAt DateTime @default(now())
  concert   Concert  @relation(fields: [concertId], references: [id])
  venue     Venue    @relation(fields: [venueId], references: [id])

  @@id([concertId, venueId])
}

model ConcertsOnPosters {
  concertId String
  posterId  String
  createdAt DateTime @default(now())
  concert   Concert  @relation(fields: [concertId], references: [id])
  poster    Poster   @relation(fields: [posterId], references: [id])

  @@id([concertId, posterId])
}

model ConcertsOnTickets {
  concertId String
  ticketId  String
  createdAt DateTime @default(now())
  concert   Concert  @relation(fields: [concertId], references: [id])
  ticket    Ticket   @relation(fields: [ticketId], references: [id])

  @@id([concertId, ticketId])
}

model ConcertsOnDetailImages {
  concertId     String
  detailImageId String
  createdAt     DateTime    @default(now())
  concert       Concert     @relation(fields: [concertId], references: [id])
  detailImage   DetailImage @relation(fields: [detailImageId], references: [id])

  @@id([concertId, detailImageId])
}

model UsersOnSubscribedConcerts {
  userId    String
  concertId String
  createdAt DateTime @default(now())
  concert   Concert  @relation(fields: [concertId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, concertId])
}

model UsersOnSubscribedArtists {
  userId    String
  artistId  String
  createdAt DateTime @default(now())
  artist    Artist   @relation(fields: [artistId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, artistId])
}

model UsersOnSubscribedVenues {
  userId    String
  venueId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  venue     Venue    @relation(fields: [venueId], references: [id])

  @@id([userId, venueId])
}

model Copyright {
  id                 String               @id @default(uuid())
  owner              String
  license            String
  licenseURL         String
  createdAt          DateTime             @default(now())
  ArtistProfileImage ArtistProfileImage[]
  Posters            Poster[]
}

model LocationCity {
  id                String                              @id @default(uuid())
  name              String                              @unique
  lat               Float
  lng               Float
  geohash           String?
  createdAt         DateTime                            @default(now())
  uiName            String
  disabled          Boolean                             @default(false)
  serialNumber      Int?
  concerts          Concert[]
  locationCountries LocationCitiesOnLocationCountries[]
}

model LocationCountry {
  id             String                              @id @default(uuid())
  name           String                              @unique
  lat            Float?
  lng            Float?
  createdAt      DateTime                            @default(now())
  uiName         String
  locationCities LocationCitiesOnLocationCountries[]
}

model LocationCitiesOnLocationCountries {
  locationCountryId String
  locationCityId    String
  createdAt         DateTime        @default(now())
  locationCity      LocationCity    @relation(fields: [locationCityId], references: [id])
  locationCountry   LocationCountry @relation(fields: [locationCountryId], references: [id])

  @@id([locationCountryId, locationCityId])
}

model bundles {
  id                  String    @id @db.Uuid
  platform            platforms
  target_app_version  String
  should_force_update Boolean
  enabled             Boolean
  file_url            String
  file_hash           String
  git_commit_hash     String?
  message             String?

  @@index([target_app_version])
}

enum platforms {
  ios
  android
}
