name: Blog Client CI/CD Pipeline

on:
  workflow_dispatch: # Allows the workflow to be triggered manually

jobs:
  blog_client_build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Amazon ECR
        uses: ./composites/ci-cd.ecr-login.yml
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          aws_ecr_repository: ${{ secrets.ECR_REPOSITORY }}

      - name: Create .env file from template
        run: |
          echo "NOTION_TOKEN=${{ secrets.NOTION_TOKEN }}" >> ./apps/blog-client/.env
          echo "NOTION_BLOG_DATABASE_ID=${{ secrets.NOTION_BLOG_DATABASE_ID }}" >> ./apps/blog-client/.env
          echo "NOTION_RESUME_DATABASE_ID=${{ secrets.NOTION_RESUME_DATABASE_ID }}" >> ./apps/blog-client/.env
          echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> ./apps/blog-client/.env
          echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> ./apps/blog-client/.env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> ./apps/blog-client/.env
          touch "./apps/coldsurf-io/.env"
          touch "./apps/wamuseum-client/.env"
          touch "./apps/billets-server/.env"
          touch "./apps/wamuseum-server/.env"

      - name: Docker Compose build and push
        uses: ./composites/ci-cd.docker-compose-build.yml
        with:
          docker_compose_service: 'blog-client'
          aws_ecr_repository: ${{ secrets.ECR_REPOSITORY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7 # Specify the Terraform version (adjust as necessary)

      # Step 3: Cache Terraform provider plugins
      - name: 'Cache Terraform Providers'
        uses: actions/cache@v2
        with:
          path: ~/.terraform.d/plugins
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      # Step 4: Initialize Terraform
      - name: 'Terraform Init'
        run: terraform init
        working-directory: ./terraform/

      - name: 'Terraform Import'
        run: terraform import aws_security_group.coldsurf-terraform-sg ${{ secrets.AWS_SECURITY_GROUP_ID }}
        working-directory: ./terraform/

      - name: 'Terraform Validate'
        run: terraform validate
        working-directory: ./terraform/

      - name: 'Terraform Plan'
        run: terraform plan -out=tfplan
        working-directory: ./terraform/ # Again specify the working directory

      - name: 'Terraform Apply'
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform/

      - name: Create PEM file from GitHub Secret
        env:
          EC2_PEM_KEY: ${{ secrets.EC2_PEM_KEY }}
        run: |
          echo "$EC2_PEM_KEY" > ec2-key.pem
          chmod 600 ec2-key.pem  # Set proper permissions for the PEM file

      - name: SSH into EC2 and Deploy
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          ECR_REMOTE_HOST: ${{ secrets.ECR_REPOSITORY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Install AWS CLI on the runner
          sudo apt-get install -y awscli

          # Use the PEM file to SSH into the EC2 instance
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem $EC2_USER@$EC2_HOST << 'EOF'
            # setup env variables
            export ECR_REMOTE_HOST=${{ secrets.ECR_REPOSITORY }}
            export GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
            export AWS_REGION=${{ secrets.AWS_REGION }}
            # Commands to deploy your application on EC2
            cd ~/repo/surfers-root
            git pull origin main
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REMOTE_HOST
            docker-compose -f ./docker/docker-compose.yml pull blog-client
            docker-compose -f ./docker/docker-compose.yml up -d blog-client
          EOF

      - name: Clean up PEM file
        run: |
          rm -f ec2-key.pem
