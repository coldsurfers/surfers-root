name: Blog Client CI/CD Pipeline

on:
  workflow_dispatch: # Allows the workflow to be triggered manually

jobs:
  blog_client_build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Amazon ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

      - name: Create .env file from template
        run: |
          echo "NOTION_TOKEN=${{ secrets.NOTION_TOKEN }}" >> .env
          echo "NOTION_BLOG_DATABASE_ID=${{ secrets.NOTION_BLOG_DATABASE_ID }}" >> .env
          echo "NOTION_RESUME_DATABASE_ID=${{ secrets.NOTION_RESUME_DATABASE_ID }}" >> .env
          echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> .env
          echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env

      - name: Install Docker Compose
        run: |
          DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep tag_name | cut -d '"' -f 4)
          sudo curl -L "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Verify Docker Compose Installation
        run: docker-compose --version

      - name: Build Docker Image
        run: |
          docker-compose -f ./docker/docker-compose.yml build blog-client

      - name: Push Docker Image to ECR
        run: |
          docker-compose -f ./docker/docker-compose.yml push blog-client

      - name: Create PEM file from GitHub Secret
        env:
          EC2_PEM_KEY: ${{ secrets.EC2_PEM_KEY }}
        run: |
          echo "$EC2_PEM_KEY" > ec2-key.pem
          chmod 600 ec2-key.pem  # Set proper permissions for the PEM file

      - name: SSH into EC2 and Deploy
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Install AWS CLI on the runner
          sudo apt-get install -y awscli

          # Retrieve the latest image from ECR
          IMAGE_URI="${{ secrets.ECR_REPOSITORY }}:latest"

          # Use the PEM file to SSH into the EC2 instance
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem $EC2_USER@$EC2_HOST << 'EOF'
            # Commands to deploy your application on EC2
            cd ~/repo/surfers-root
            git pull origin main
            docker-compose -f ./docker/docker-compose.yml pull blog-client
            docker-compose -f ./docker/docker-compose.yml up -d blog-client
          EOF

      - name: Clean up PEM file
        run: |
          rm -f ec2-key.pem
